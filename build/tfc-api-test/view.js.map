{"version":3,"file":"tfc-api-test/view.js","mappings":";;;;AAAA;AACA;AACA,IAAIA,WAAW,GAAG,EAAE;AAChB,MAAMC,YAAY,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,4BAA4B,CAAC;AAE5EF,YAAY,CAACG,OAAO,CAACC,KAAK,IAAG;EAC7B,IAAIA,KAAK,CAACC,OAAO,EAAE;IACfN,WAAW,GAAGK,KAAK,CAACE,KAAK;EAC7B;EACIF,KAAK,CAACG,gBAAgB,CAAC,QAAQ,EAAE,YAAU;IAC3C,IAAI,IAAI,CAACF,OAAO,EAAE;MACdN,WAAW,GAAG,IAAI,CAACO,KAAK;MACxBE,aAAa,CAAC,CAAC;IACnB;IACA;EACJ,CAAC,CAAC;AAAA,CAAC,CAAC;AACJ;AACAA,aAAa,CAAC,CAAC;AAInB,SAASA,aAAaA,CAAA,EAAG;EACrBC,SAAS,CAAC,CAAC;AACf;AACA,eAAeA,SAASA,CAAA,EAAG;EACvBC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC5B,MAAMC,UAAU,GAAGC,kBAAkB,CAACd,WAAW,CAAC;EAClDW,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;EACvB,MAAME,cAAc,GAAG,MAAMC,KAAK,CAAC,4CAA4CH,UAAU,EAAE,CAAC;EAC5F,MAAMI,OAAO,GAAG,MAAMF,cAAc,CAACG,IAAI,CAAC,CAAC;EAC3CP,OAAO,CAACC,GAAG,CAACK,OAAO,CAAC;EACpB,IAAGA,OAAO,CAACE,MAAM,EAAC;IACdR,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BV,QAAQ,CAACkB,aAAa,CAAC,UAAU,CAAC,CAACC,SAAS,GAAGC,YAAY,CAACL,OAAO,CAAC;EACxE,CAAC,MAAK;IACFf,QAAQ,CAACkB,aAAa,CAAC,UAAU,CAAC,CAACC,SAAS,GAAG,mBAAmB;EACtE;AACJ;AAGA,SAASC,YAAYA,CAACL,OAAO,EAAE;EAC3B,IAAIM,OAAO,GAAG,EAAE;EAEhBN,OAAO,CAACb,OAAO,CAACoB,IAAI,IAAI;IACpBD,OAAO,IAAI;AACnB,2BAA2BC,IAAI,CAACC,IAAI,KAAKD,IAAI,CAACE,KAAK,CAACC,QAAQ,SAASH,IAAI,CAACI,GAAG,CAACC,OAAO,CAACC,IAAI,MAAMN,IAAI,CAACI,GAAG,CAACG,UAAU;AACnH;AACA;AACA,eAAe;IAEP,OAAOR,OAAO;EAElB,CAAC,CAAC;EACF,OAAOA,OAAO;AAClB,C","sources":["webpack://tfc-api-test/./src/tfc-api-test/view.js"],"sourcesContent":["//const allMains = document.querySelectorAll('.main');\n//allMains.forEach(el =>fetchMessages(el));\nlet messageType = \"\";\n    const radioButtons = document.querySelectorAll(\"input[name='message-type']\");\n \n    radioButtons.forEach(radio=> {\n    if (radio.checked) {\n        messageType = radio.value;\n    }\n        radio.addEventListener('change', function(){\n        if (this.checked) {\n            messageType = this.value;\n            fetchMessages();\n        }\n        //console.log(messageType);\n    })});\n    //console.log(messageType);\n    fetchMessages();    \n        \n    \n    \nfunction fetchMessages() {  \n    fetchText();\n} \nasync function fetchText() {\n    console.log(\"fetching text\");\n    const cleanValue = encodeURIComponent(messageType);\n    console.log(cleanValue);    \n    const resultspromise = await fetch(`/wp-json/wp/v2/message?message-type-slug=${cleanValue}`);\n    const results = await resultspromise.json();\n    console.log(results);\n    if(results.length){\n        console.log(\"Results found\");\n        document.querySelector(\".results\").innerHTML = generateHTML(results);\n    }else {\n        document.querySelector(\".results\").innerHTML = \"No Messages Found\";     \n    }\n}\n\n\nfunction generateHTML(results) {\n    let bigHTml = \"\";\n\n    results.forEach(item => {\n        bigHTml += `<div class=\"result-item\">\n            <h3><a href=\"${item.link}\">${item.title.rendered}</a>, ${item.acf.speaker.name},  ${item.acf.date_given}</h3>\n            \n            \n        </div>`;\n        \n        return bigHTml;\n\n    });\n    return bigHTml;\n}"],"names":["messageType","radioButtons","document","querySelectorAll","forEach","radio","checked","value","addEventListener","fetchMessages","fetchText","console","log","cleanValue","encodeURIComponent","resultspromise","fetch","results","json","length","querySelector","innerHTML","generateHTML","bigHTml","item","link","title","rendered","acf","speaker","name","date_given"],"sourceRoot":""}